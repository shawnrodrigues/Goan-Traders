---
deployment:
  tasks:
    # =============================================================================
    # cPanel Auto-Deployment Configuration for Goan Traders Website
    # =============================================================================
    # This script handles deployment to cPanel hosting with smart Node.js detection
    # and fallback strategies for different hosting environments.
    
    # IMPORTANT: Replace 'yourusername' with your actual cPanel username
    - export DEPLOYPATH=/home/wgkxiqzw/public_html/
    
    # Create backup of previous deployment (optional)
    - test -d $DEPLOYPATH && /bin/cp -R $DEPLOYPATH $DEPLOYPATH/../backup_$(date +%Y%m%d_%H%M%S) || echo "No previous deployment to backup"
    
    # Copy all project files to deployment path
    - /bin/cp -R . $DEPLOYPATH
    
    # Navigate to deployment directory
    - cd $DEPLOYPATH
    
    # =============================================================================
    # Node.js Build Process (with fallback)
    # =============================================================================
    
    # Check if Node.js is available and attempt build
    - if command -v node >/dev/null 2>&1; then echo "‚úÖ Node.js detected - attempting build"; else echo "‚ö†Ô∏è  Node.js not available - using static files"; fi
    
    # Install dependencies if Node.js is available
    - command -v npm >/dev/null 2>&1 && npm install --production --silent || echo "üì¶ Skipping npm install - Node.js not available"
    
    # Build the Astro site if possible
    - command -v npm >/dev/null 2>&1 && npm run build || echo "üèóÔ∏è  Skipping build - using pre-built files"
    
    # =============================================================================
    # File Structure Organization
    # =============================================================================
    
    # If build was successful, move built files to web root
    - if test -d dist; then echo "üìÅ Moving built files to web root"; /bin/cp -R dist/* ./; /bin/rm -rf dist/; else echo "üìÅ No dist folder - proceeding with source files"; fi
    
    # Ensure public assets are in the correct location
    - if test -d public; then echo "üìÇ Moving public assets"; /bin/cp -R public/* ./; /bin/rm -rf public/; else echo "üìÇ No public folder found"; fi
    
    # =============================================================================
    # API Route Handling
    # =============================================================================
    
    # For cPanel hosting, we need PHP version of the API since Node.js APIs won't work
    # The contact form will automatically detect and use the appropriate endpoint
    
    # Ensure API directory exists
    - mkdir -p $DEPLOYPATH/api
    
    # Create PHP version of the API if it doesn't exist or is empty
    - if [ ! -s $DEPLOYPATH/api/submit-form.php ]; then
        echo "üìù Creating PHP API endpoint for cPanel compatibility";
        cat > $DEPLOYPATH/api/submit-form.php << 'EOF'
<?php
// cPanel-compatible PHP API for contact form submissions
header('Access-Control-Allow-Origin: *');
header('Access-Control-Allow-Methods: POST, OPTIONS');
header('Access-Control-Allow-Headers: Content-Type');
header('Content-Type: application/json');

if ($_SERVER['REQUEST_METHOD'] === 'OPTIONS') {
    http_response_code(200);
    exit();
}

if ($_SERVER['REQUEST_METHOD'] !== 'POST') {
    http_response_code(405);
    echo json_encode(['error' => 'Method not allowed']);
    exit();
}

// Simple validation and response
$input = json_decode(file_get_contents('php://input'), true);
if (!$input) {
    $input = $_POST; // Fallback to form data
}

$name = isset($input['name']) ? trim($input['name']) : '';
$phone = isset($input['phone']) ? trim($input['phone']) : '';
$email = isset($input['email']) ? trim($input['email']) : '';

if (empty($name) || empty($phone)) {
    http_response_code(400);
    echo json_encode(['error' => 'Name and phone are required']);
    exit();
}

// Log submission (you can enhance this to send emails or save to database)
error_log('Contact form submission: ' . json_encode($input));

echo json_encode([
    'success' => true,
    'message' => 'Thank you for your message! We will get back to you soon.'
]);
?>
EOF
      else
        echo "‚úÖ PHP API endpoint already exists";
      fi
    
    # =============================================================================
    # Environment Configuration
    # =============================================================================
    
    # Copy environment variables if .env file exists (for PHP to read)
    - if test -f .env; then /bin/cp .env $DEPLOYPATH/; echo "üîß Environment variables copied"; else echo "üîß No .env file found"; fi
    
    # =============================================================================
    # Cleanup Development Files
    # =============================================================================
    
    # Remove development-only files and directories
    - /bin/rm -rf node_modules/ src/ .astro/ .git/ .vscode/
    - /bin/rm -f *.config.mjs *.config.js tsconfig.json package*.json
    - /bin/rm -f .gitignore README.md TODO.md SECURITY.md CPANEL-DEPLOYMENT.md
    - /bin/rm -f .env.example yarn.lock pnpm-lock.yaml
    
    # Keep only essential files for production
    - echo "üßπ Development files cleaned up"
    
    # =============================================================================
    # File Permissions Setup
    # =============================================================================
    
    # Set proper permissions for web files (security best practice)
    - find $DEPLOYPATH -type f -name "*.html" -exec chmod 644 {} \;
    - find $DEPLOYPATH -type f -name "*.css" -exec chmod 644 {} \;
    - find $DEPLOYPATH -type f -name "*.js" -exec chmod 644 {} \;
    - find $DEPLOYPATH -type f -name "*.php" -exec chmod 644 {} \;
    - find $DEPLOYPATH -type f -name "*.json" -exec chmod 644 {} \;
    - find $DEPLOYPATH -type f -name "*.xml" -exec chmod 644 {} \;
    - find $DEPLOYPATH -type f -name "*.txt" -exec chmod 644 {} \;
    
    # Set permissions for media files
    - find $DEPLOYPATH -type f \( -name "*.png" -o -name "*.jpg" -o -name "*.jpeg" -o -name "*.gif" -o -name "*.webp" -o -name "*.svg" -o -name "*.ico" \) -exec chmod 644 {} \;
    
    # Set directory permissions
    - find $DEPLOYPATH -type d -exec chmod 755 {} \;
    
    # =============================================================================
    # Post-Deployment Verification
    # =============================================================================
    
    # Verify critical files exist
    - test -f $DEPLOYPATH/index.html && echo "‚úÖ Homepage deployed successfully" || echo "‚ùå Homepage not found"
    - test -f $DEPLOYPATH/contact.html && echo "‚úÖ Contact page deployed" || echo "‚ùå Contact page not found"
    - test -f $DEPLOYPATH/api/submit-form.php && echo "‚úÖ API endpoint deployed" || echo "‚ùå API endpoint missing"
    - test -f $DEPLOYPATH/favicon.ico && echo "‚úÖ Favicon deployed" || echo "‚ö†Ô∏è  Favicon missing"
    
    # Create deployment log
    - echo "üöÄ Deployment completed at $(date)" > $DEPLOYPATH/deployment.log
    - echo "üìä Deployment summary:" >> $DEPLOYPATH/deployment.log
    - ls -la $DEPLOYPATH | head -20 >> $DEPLOYPATH/deployment.log
    
    # =============================================================================
    # Security Hardening
    # =============================================================================
    
    # Create .htaccess for additional security (if not exists)
    - if [ ! -f $DEPLOYPATH/.htaccess ]; then
        echo "üîí Creating security .htaccess";
        cat > $DEPLOYPATH/.htaccess << 'EOF'
# Security headers
Header always set X-Content-Type-Options nosniff
Header always set X-Frame-Options DENY
Header always set X-XSS-Protection "1; mode=block"
Header always set Referrer-Policy strict-origin-when-cross-origin

# Cache control for static assets
<FilesMatch "\.(css|js|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$">
    ExpiresActive On
    ExpiresDefault "access plus 1 month"
    Header set Cache-Control "public, max-age=2592000"
</FilesMatch>

# Prevent access to sensitive files
<FilesMatch "\.(env|log|yml|yaml|config)$">
    Order Allow,Deny
    Deny from all
</FilesMatch>

# Enable compression
<IfModule mod_deflate.c>
    AddOutputFilterByType DEFLATE text/plain
    AddOutputFilterByType DEFLATE text/html
    AddOutputFilterByType DEFLATE text/xml
    AddOutputFilterByType DEFLATE text/css
    AddOutputFilterByType DEFLATE application/xml
    AddOutputFilterByType DEFLATE application/xhtml+xml
    AddOutputFilterByType DEFLATE application/rss+xml
    AddOutputFilterByType DEFLATE application/javascript
    AddOutputFilterByType DEFLATE application/x-javascript
</IfModule>
EOF
      else
        echo "‚úÖ .htaccess already exists";
      fi
    
    # Final success message
    - echo "üéâ Goan Traders website deployed successfully to cPanel!"
    - echo "üåê Your website should now be accessible via your domain"
    - echo "üìû Contact form will work with both Node.js and PHP backends"
    - echo "üîß Check $DEPLOYPATH/deployment.log for detailed deployment info"
